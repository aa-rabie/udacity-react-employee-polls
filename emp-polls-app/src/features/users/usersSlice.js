import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";

import { _getUsers } from "../../_DATA";

const initialState = {
  status: "idle",
  data: {},
};

export const fetchAllUsersAsync = createAsyncThunk(
  "users/fetchAll",
  async () => {
    const users = await _getUsers();
    // The value we return becomes the `fulfilled` action payload
    return users;
  }
);

export const usersSlice = createSlice({
  name: "users",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAllUsersAsync.pending, (state, action) => {
        // Redux Toolkit uses Immer to generate new state from existing-state
        state.status = "pending";
      })
      .addCase(fetchAllUsersAsync.fulfilled, (state, action) => {
        // Redux Toolkit uses Immer to generate new state from existing-state
        state.data = Object.assign({}, state.data, { ...action.payload });
        state.status = "loaded";
      });
  },
});

export default usersSlice.reducer;
